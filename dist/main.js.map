{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/snake.js","webpack:///./lib/helpers.js","webpack:///./lib/food.js","webpack:///./src/index.js","webpack:///./lib/game.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Snake","[object Object]","this","size","body","x","y","direction","gameWidth","gameHeight","intendedDir","bd","length","push","shift","unshift","coordToIndex","width","indexToCoord","Math","floor","food_Food","w","h","snakePos","retry","tryPosition","random","forEach","pos","intendedDirection","thereMayBeFood","snakeSize","gameSpeed","document","addEventListener","event","keyCode","drawGrid","setTimeout","snake","food","findAGoodSpot","listenToControls","gameInterval","setInterval","nextStep","newSnakeBody","move","headX","headY","grow","drawSnakeAndFood","checkForDeath","updateStats","gameGrid","querySelector","style","transform","querySelectorAll","td","border","snakeBodyCopy","head","slice","console","log","getElementById","lostModal","display","innerText","toString","clearInterval","location","reload","snakeBody","cellData","tailX","tailY","backgroundColor","height","innerHTML","play"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","class Snake {\n  constructor() {\n    this.size = 1\n    this.body = [\n      // Snake's last node is invisible. It is colored back to white as snake goes forward\n      { x: 3, y: 3 }, // This is a fake snake tile\n      { x: 4, y: 4 }, // This is a real snake tile\n    ]\n    this.direction = 'right'\n  }\n\n  move(gameWidth, gameHeight, intendedDir) {\n    if (\n      !(\n        (intendedDir === 'right' && this.direction === 'left') ||\n        (intendedDir === 'left' && this.direction === 'right') ||\n        (intendedDir === 'up' && this.direction === 'down') ||\n        (intendedDir === 'down' && this.direction === 'up')\n      )\n    ) {\n      this.direction = intendedDir\n    }\n    const bd = this.body\n    switch (this.direction) {\n      case 'right':\n        if (bd[bd.length - 1].x === gameWidth) {\n          bd.push({\n            x: 0,\n            y: bd[bd.length - 1].y,\n          })\n        } else {\n          bd.push({\n            x: bd[bd.length - 1].x + 1,\n            y: bd[bd.length - 1].y,\n          })\n        }\n        break\n      case 'left':\n        if (bd[bd.length - 1].x === 0) {\n          bd.push({\n            x: gameWidth,\n            y: bd[bd.length - 1].y,\n          })\n        } else {\n          bd.push({\n            x: bd[bd.length - 1].x - 1,\n            y: bd[bd.length - 1].y,\n          })\n        }\n        break\n      case 'up':\n        if (bd[bd.length - 1].y === 0) {\n          bd.push({\n            x: bd[bd.length - 1].x,\n            y: gameHeight,\n          })\n        } else {\n          bd.push({\n            x: bd[bd.length - 1].x,\n            y: bd[bd.length - 1].y - 1,\n          })\n        }\n        break\n      case 'down':\n        if (bd[bd.length - 1].y === gameHeight) {\n          bd.push({\n            x: bd[bd.length - 1].x,\n            y: 0,\n          })\n        } else {\n          bd.push({\n            x: bd[bd.length - 1].x,\n            y: bd[bd.length - 1].y + 1,\n          })\n        }\n        break\n    }\n    bd.shift()\n    return this.body\n  }\n\n  grow() {\n    this.body.unshift({\n      x: this.body[0].x,\n      y: this.body[0].y,\n    })\n  }\n}\n\nexport { Snake }\n","export const coordToIndex = (x, y, width) => {\n  return x + y * (width + 1)\n}\n\nexport const indexToCoord = (i, width) => {\n  return [i % (width + 1), Math.floor(i / (width + 1))]\n}\n","import { coordToIndex, indexToCoord } from './helpers'\n\nclass Food {\n  findAGoodSpot(w, h, snakePos) {\n    let retry = true\n    let tryPosition = null\n    while (retry) {\n      retry = false\n      tryPosition = Math.floor(Math.random() * coordToIndex(w, h, w))\n      snakePos.forEach((pos) => {\n        if (coordToIndex(pos.x, pos.y, w) === tryPosition) {\n          retry = true\n        }\n      })\n    }\n    ;[this.x, this.y] = indexToCoord(tryPosition, w)\n  }\n}\n\nexport { Food }\n","import { Game } from '../lib/game.js'\n\nnew Game().play()\n","import { Snake } from './snake'\nimport { Food } from './food'\nimport { coordToIndex } from './helpers'\n\nclass Game {\n  constructor() {\n    // Must be same width and height to work properly\n    this.gameWidth = 10\n    this.gameHeight = 10\n    this.intendedDirection = 'right'\n    this.thereMayBeFood = false\n    this.snakeSize = 1\n    this.gameSpeed = 170\n  }\n\n  listenToControls() {\n    document.addEventListener('keydown', (event) => {\n      switch (event.keyCode) {\n        case 37:\n          this.intendedDirection = 'left'\n          break\n        case 38:\n          this.intendedDirection = 'up'\n          break\n        case 39:\n          this.intendedDirection = 'right'\n          break\n        case 40:\n          this.intendedDirection = 'down'\n          break\n      }\n    })\n  }\n\n  play() {\n    this.drawGrid(this.gameWidth, this.gameHeight)\n    setTimeout(() => {\n      const snake = new Snake()\n      const food = new Food()\n      setTimeout(() => {\n        food.findAGoodSpot(this.gameWidth, this.gameHeight, snake.body)\n        this.thereMayBeFood = true\n      }, 2500)\n      this.listenToControls()\n      this.gameInterval = setInterval(\n        () => this.nextStep(snake, this.intendedDirection, food),\n        this.gameSpeed\n      )\n    }, 1000)\n  }\n\n  nextStep(snake, intendedDirection, food) {\n    const newSnakeBody = snake.move(\n      this.gameWidth,\n      this.gameHeight,\n      intendedDirection\n    )\n    const headX = newSnakeBody[newSnakeBody.length - 1].x\n    const headY = newSnakeBody[newSnakeBody.length - 1].y\n    if (headX === food.x && headY === food.y) {\n      snake.grow()\n      this.snakeSize++\n      food.findAGoodSpot(this.gameWidth, this.gameHeight, snake.body)\n    }\n    this.drawSnakeAndFood(newSnakeBody, food)\n    this.checkForDeath(snake)\n    this.updateStats()\n    const gameGrid = document.querySelector('.game-grid')\n    gameGrid.style.transform += 'rotateZ(0.2deg)'\n    gameGrid.querySelectorAll('td').forEach((td) => {\n      if (newSnakeBody.length % 20 > 10) {\n        td.style.border = 'none'\n      } else {\n        td.style.border = '1px solid #9d0191'\n      }\n    })\n  }\n\n  checkForDeath(snake) {\n    const snakeBodyCopy = [...snake.body]\n    const head = snakeBodyCopy[snakeBodyCopy.length - 1]\n    const headlessBody = [...snakeBodyCopy].slice(1, snakeBodyCopy.length - 1)\n    headlessBody.forEach((pos) => {\n      if (pos.x === head.x && pos.y === head.y) {\n        console.log(snakeBodyCopy)\n        console.log(snakeBodyCopy.length)\n        console.log(document.getElementById('final-score'))\n        const lostModal = document.getElementById('lost-modal')\n        lostModal.style.display = 'flex'\n        document.getElementById('final-score').innerText = (\n          snakeBodyCopy.length - 1\n        ).toString()\n        clearInterval(this.gameInterval)\n        lostModal.addEventListener('click', () => {\n          location.reload()\n        })\n      }\n    })\n  }\n\n  drawSnakeAndFood(snakeBody, food) {\n    const cellData = document.querySelectorAll('td')\n    const headX = snakeBody[snakeBody.length - 1].x\n    const headY = snakeBody[snakeBody.length - 1].y\n    const tailX = snakeBody[0].x\n    const tailY = snakeBody[0].y\n    if (headX === tailX && headY === tailY) {\n      return\n    }\n    cellData[coordToIndex(headX, headY, this.gameWidth)].style.backgroundColor =\n      '#fecd1a'\n    cellData[coordToIndex(tailX, tailY, this.gameWidth)].style.backgroundColor =\n      '#120078'\n    if (this.thereMayBeFood) {\n      cellData[\n        coordToIndex(food.x, food.y, this.gameWidth)\n      ].style.backgroundColor = '#fd3a69'\n    }\n  }\n\n  drawGrid(width, height) {\n    const gameGrid = document.querySelector('.game-grid tbody')\n    for (let x = 0; x < width + 1; x++) {\n      gameGrid.innerHTML += `<tr data-row=${x}></tr>`\n      for (let y = 0; y < height + 1; y++) {\n        gameGrid.querySelector(`tr[data-row=\"${x}\"]`).innerHTML += '<td></td>'\n      }\n    }\n  }\n\n  updateStats() {\n    document.querySelector('#snake-size').innerHTML = this.snakeSize\n  }\n}\n\nexport { Game }\n"],"sourceRoot":""}